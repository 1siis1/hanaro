# 변수 설정 (사용자 환경에 맞게 수정)
@host = http://localhost:8080
@email = user@example.com
@password = password123!
@nickname = TestUser
@accessToken =

###
# ==================================
# 1. 회원가입 (정상)
# ==================================
# 새로운 사용자를 등록합니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "{{password}}",
  "nickname": "{{nickname}}"
}

###
# ==================================
# 2. 회원가입 (중복된 이메일 - 에러 발생)
# ==================================
# 동일한 이메일로 다시 가입을 시도하여 에러 응답을 확인합니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "{{password}}",
  "nickname": "AnotherUser"
}


###
# ==================================
# 3. 회원가입 (유효성 검사 실패 - 짧은 비밀번호)
# ==================================
# 유효성 검사 규칙에 맞지 않는 데이터를 보내 에러 응답을 확인합니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "invalid@test.com",
  "password": "123",
  "nickname": "shortpw"
}


###
# ==================================
# 4. 로그인 (성공 및 토큰 저장)
# ==================================
# 정상적으로 로그인하고, 응답으로 받은 JWT를 accessToken 변수에 저장합니다.
# '> {% ... %}' 이 스크립트를 통해 토큰이 자동으로 변수에 할당됩니다.
POST {{host}}/auth/login
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "{{password}}"
}
> {%
    client.global.set("accessToken", response.body.accessToken);
%}


###
# ==================================
# 5. 로그인 (실패 - 잘못된 비밀번호)
# ==================================
POST {{host}}/auth/login
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "wrongpassword!"
}


###
# ==================================
# 6. 인증이 필요한 API 테스트 예시
# ==================================
# 위에서 저장된 accessToken을 사용하여 인증이 필요한 API를 호출하는 예시입니다.
# (예: /api/mypage/orders)
GET {{host}}/api/some-protected-resource
Authorization: Bearer {{accessToken}}
